.container#app
  .row
    .col
      h1 #{@snek.name} rules
    .col.text-right
      = simple_form_for @snek, url: save_rules_snek_path(@snek), method: :put do |f|
        = f.input :rules,  as: :hidden, input_html: {value: @snek.rules.to_json}
        = link_to 'Cancel', @snek, class: 'btn btn-outline-secondary'
        = f.submit 'Save', class: 'btn btn-primary ml-3'

  .row
    .col-md-8.mb-3
      = render 'tools'
    .col-md-4.mb-3
      = render 'logic'

  .row
    - (0..8).each do |pattern_id|
      .col-md-4
        .r-rules-pattern-container.mb-3
          table.r-pattern-table
            - (0..6).each do |row_id|
              tr
                - (0..6).each do |cell_id|
                  td id="c_#{pattern_id}_#{row_id}_#{cell_id}"  v-bind:class="cellClass(#{pattern_id}, #{row_id}, #{cell_id})" v-on:click="setTool({pattern: #{pattern_id}, row: #{row_id}, cell: #{cell_id}})"

javascript:

  // Init app
  var app = new Vue({
      el: '#app',
      data: {
          currentTool: 'default',
          currentLogic: 'and',
          rules: window.gon.snek_rules
      },
      methods: {
          selectTool: function(event) {
              this.currentTool = event.target.dataset.tool;
          },

          selectLogic: function(event) {
              this.currentLogic = event.target.dataset.logic;
          },

          cellClass: function(x,y,z) {
              var classes = 'r-pattern-cell__' + this.rules[x][y][z][0];
              switch(this.rules[x][y][z][1]) {
                  case 'or':
                      classes += ' r-pattern-cell__or';
                      break;
                  case 'not':
                      classes += ' r-pattern-cell__not';
                      break;
              }
              return classes;
          },

          cellClassByTools: function() {
              var classes = 'r-pattern-cell__' + this.currentTool;
              switch (this.currentLogic) {
                  case 'or':
                      classes += ' r-pattern-cell__or';
                      break;
                  case 'not':
                      classes += ' r-pattern-cell__not';
                      break;
              }
              return classes;
          },

          setTool: function(data) {
              var $cell = $('#c_' + data.pattern + '_' + data.row + '_' + data.cell);
              switch(this.currentTool) {
                  case 'my_head':
                      if($cell[0] !== this.currentTool) {
                          // Find current my head and replace to default
                          for(var i = 0; i < this.rules[data.pattern].length; i++) {
                              for(var j = 0; j < this.rules[data.pattern][i].length; j++) {
                                  if(this.rules[data.pattern][i][j][0] === 'my_head') {
                                      this.rules[data.pattern][i][j][0] = 'default';
                                      this.rules[data.pattern][i][j][1] = 'and';
                                      $('#c_' + data.pattern + '_' + i + '_' + j).removeClass();
                                      $('#c_' + data.pattern + '_' + i + '_' + j).addClass( this.cellClassByTools() );
                                      break;
                                  }
                              }
                          }
                          // Set my head to new position
                          this.rules[data.pattern][data.row][data.cell][0] = this.currentTool;
                          this.rules[data.pattern][data.row][data.cell][1] = 'and';
                          $cell.removeClass();
                          $cell.addClass('r-pattern-cell__' + this.currentTool);
                      }
                      break;
                  case 'default':
                      if (this.rules[data.pattern][data.row][data.cell][0] !== 'my_head') {
                          this.rules[data.pattern][data.row][data.cell][0] = this.currentTool;
                          this.rules[data.pattern][data.row][data.cell][1] = 'and';
                          $cell.removeClass();
                          $cell.addClass( 'r-pattern-cell__default' );
                      }
                      break;
                  default:
                      // Do not change for the same cell or if current cell is my head
                      if (this.rules[data.pattern][data.row][data.cell][0] !== 'my_head') {
                          this.rules[data.pattern][data.row][data.cell][0] = this.currentTool;
                          this.rules[data.pattern][data.row][data.cell][1] = this.currentLogic;
                          $cell.removeClass();
                          $cell.addClass( this.cellClassByTools() );
                      }

                      break;

              }

              // Store to the form
              $('#snek_rules').val( JSON.stringify(this.rules) );

          }

      }
  });

  // On window resize
  $(document).ready(resizePatterns);
  $(window).resize(resizePatterns);

  // Resize patterns cells
  function resizePatterns() {
      $('.r-pattern-table').height($('.r-pattern-table').width());
      $('.r-pattern-table td').height($('.r-pattern-table td').width());
  }

