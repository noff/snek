.container#app
  .row
    .col
      h1 #{@snek.name} rules
    .col.text-right
      = link_to 'Back', @snek, class: 'btn btn-outline-secondary'

  .row
    .col.mb-3
      = render 'tools'



  .row#patterns-container
    rule-pattern v-for="(pattern, index) in rules" v-bind:pattern="pattern" v-bind:pattern_id="index" v-bind:key="index" v-on:set-tool="setTool()"


javascript:

  // TODO: I need to implement this behavior when user clicks on cell:
  // 1. Property 'cell' changes to value `currentTool` in root object
  // 2. Immediately after that method cellClass(cell) have to be called in root object
  // 3. Selected currentTool is set in root's property 'rues' into specific pattern-row-cell field.
  // In other words: I need a way to exec a method in root component from third level component and a way to change data or exec method in
  // third level component from the root component. $emit method is not transfers from third level component to the root component.
  Vue.component("rule-cell", {
      template: '<td v-bind:class="cellClass(cell)" v-bind:click="setTool(pattern_id, row_id, cell_id)"></td>',
      props: ['cell', 'pattern_id', 'row_id', 'cell_id'],
      // Не уверен, что в data все так, как надо.
      data: function() {
          return {
              value: null,
              logic: null
          }
      },
      methods: {
          cellClass: function(className) {
              return 'r-pattern-cell__' + className;
          },
          setTool: function(pattern_id, row_id, cell_id) {
              // console.log(app.currentTool);
              this.$emit('set-tool', {pattern: pattern_id, row: row_id, cell: cell_id});
          },
      }
  });

  Vue.component("rule-row", {
      template: '<tr><rule-cell v-for="(cell, index) in row" v-bind:cell="cell" v-bind:key="index" v-bind:pattern_id="pattern_id" v-bind:row_id="row_id" v-bind:cell_id="index"></rule-cell></tr>',
      props: ['row', 'row_id', 'pattern_id']
  });

  Vue.component("rule-pattern", {
      template: '<div class="col-md-4"><div class="r-rules-pattern-container mb-3"><table class="r-pattern-table"><rule-row v-for="(row, index) in pattern" v-bind:row="row" v-bind:pattern_id="pattern_id" v-bind:row_id="index" v-bind:key="index"></rule-row></table></div></div>',
      props: ['pattern', 'pattern_id'],
  });

  // Init app
  var app = new Vue({
      el: '#app',
      data: {
          currentTool: 'default',
          rules: window.gon.snek_rules
      },
      methods: {
          selectTool: function(event) {
              this.currentTool = event.target.dataset.tool;
          },

          setTool: function(data) {
              console.log(data);
              switch(this.currentTool) {
                  case 'my_head':
                      if(this.rules[data.pattern][data.row][data.cell] != this.currentTool) {
                        // Заменить текущую голову на default
                        // Поставить голову в новое место
                        // TODO Перерисовать ячейки
                      }
                      break;
                  case 'not':
                      break;
                  case 'or':
                      break;
                  default:
                      if (this.rules[data.pattern][data.row][data.cell] != this.currentTool) {
                          this.rules[data.pattern][data.row][data.cell] = this.currentTool;
                          // TODO Перерисовать ячейку
                      }

                      break;

              }

          }

          // setCell: function(pattern_id, row_id, cell_id) {
          //     this.rules[pattern_id][row_id][cell_id] = this.currentTool;
          // },

      },
      computed: { },
      watch: { }
  });

  // On window resize
  $(document).ready(resizePatterns);
  $(window).resize(resizePatterns);

  // Resize patterns cells
  function resizePatterns() {
      $('.r-pattern-table').height($('.r-pattern-table').width());
      $('.r-pattern-table td').height($('.r-pattern-table td').width());
  }

